package org.getopentest.extent;

import com.aventstack.extentreports.AnalysisStrategy;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.google.gson.Gson;
import io.socket.client.IO;
import io.socket.client.Socket;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.json.JSONObject;

public class Main {

    private static String syncServerUrl = "http://localhost:3000";

    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println();
            System.out.println("Usage: java -jar opentest-extent-0.0.1.jar OPENTEST_SERVER_URL [TEST_SESSION_ID]");
            System.out.println("Example 1: java -jar opentest-extent-0.0.1.jar http://localhost:3000");
            System.out.println("Example 2: java -jar opentest-extent-0.0.1.jar http://localhost:3000 1536426443");
            System.out.println();
        } else if (args.length == 2) {
            // Server URL and session ID passed as arguments

            syncServerUrl = curateUrl(args[0]);
            String sessionId = args[1].trim();

            buildHtmlReportForSession(sessionId);
        } else if (args.length == 1) {
            // Only server URL was passed as argument

            syncServerUrl = curateUrl(args[0]);
            System.out.println("Monitoring server " + syncServerUrl);
            monitorServer();
        }
    }

    /**
     * Add the test actions for a specific test or subtest/iteration of a
     * data-driven test to the ExtentTest instance.
     */
    private static void addActionNodesForTest(ExtentTest extentTest, String testSessionId, Subtest subtest) {
        for (TestAction action : subtest.actions) {
            String screenshotInfo = action.screenshot != null
                    ? " (screenshot: " + action.screenshot + ")"
                    : "";
            System.out.println(String.format("  - [%s] Action: %s%s",
                    action.result,
                    action.description,
                    screenshotInfo));
            ExtentTest testStep = extentTest.createNode(action.description);

            if (action.screenshot != null) {
                try {
                    File screenshotsDir = Paths.get(
                            System.getProperty("user.dir"),
                            "reports",
                            testSessionId,
                            "screenshots").toFile();
                    screenshotsDir.mkdirs();

                    downloadScreenshot(action.screenshot, Paths.get(
                            screenshotsDir.getAbsolutePath(),
                            action.screenshot).toString());
                    testStep.addScreenCaptureFromPath(
                            Paths.get("screenshots", action.screenshot).toString(),
                            action.screenshot);
                } catch (Exception ex) {
                    System.out.println(String.format(
                            "ERROR: Failed adding screenshot. %s: %s",
                            ex.getClass().getName(),
                            ex.getMessage()));
                }
            }
            setTestStatus(testStep, action.result);
        }
    }

    /**
     * Builds the HTML report for the specified session.
     */
    private static void buildHtmlReportForSession(String sessionId) {
        try {
            System.out.println("Building report for " + sessionId);
            File reportDir = Paths
                    .get(System.getProperty("user.dir"), "reports", sessionId)
                    .toFile();
            reportDir.mkdirs();

            URI uri = new URI(syncServerUrl + "/api/session/" + sessionId);
            Gson gson = new Gson();
            TestSession session = gson.fromJson(new InputStreamReader(uri.toURL().openStream()), TestSession.class);

            ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(Paths.get(reportDir.getPath(), session.id + ".html").toString());
            ExtentReports extentObj = new ExtentReports();
            extentObj.setAnalysisStrategy(AnalysisStrategy.SUITE);
            extentObj.attachReporter(htmlReporter);

            int testNo = 0;

            for (Test test : session.tests) {
                testNo++;
                System.out.println(String.format("- Test %s: %s", testNo, test.name));

                if (!test.isDataDriven) {
                    ExtentTest extentTest = extentObj.createTest(test.name);
                    extentTest.getModel().setStartTime(unixTimestampToDate(test.timeStarted));
                    extentTest.getModel().setEndTime(unixTimestampToDate(test.timeCompleted));
                    setTestStatus(extentTest, test.result);

                    addActionNodesForTest(extentTest, sessionId, test);
                } else {
                    // For data-driven tests we have to loop through all
                    // subtests (iterations) of the test

                    int subtestNo = 0;

                    for (Subtest subtest : test.subtests) {
                        subtestNo++;
                        ExtentTest extentTest = extentObj.createTest(String.format("%s [%s]", test.name, subtestNo));
                        extentTest.getModel().setStartTime(unixTimestampToDate(subtest.timeStarted));
                        extentTest.getModel().setEndTime(unixTimestampToDate(subtest.timeCompleted));
                        setTestStatus(extentTest, subtest.result);

                        addActionNodesForTest(extentTest, sessionId, subtest);
                    }
                }
            }

            extentObj.flush();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Remove spaces around the URL and trailing forward slash chars.
     */
    private static String curateUrl(String url) {
        return url.trim().replaceAll("(\\/)+$", "");
    }

    private static File downloadScreenshot(String screenshotFileName, String outputFilePath) throws Exception {
        String urlStr = syncServerUrl + "/api/screenshot/" + screenshotFileName;
        URL url = new URL(urlStr);
        BufferedImage image = ImageIO.read(url.openStream());
        File outputfile = new File(outputFilePath);
        ImageIO.write(image, "png", outputfile);

        return outputfile;
    }

    private static void monitorServer() {
        try {
            Socket socket = IO.socket(syncServerUrl + "/session-status");
            socket.on("status-changed", (Object... args) -> {
                try {
                    JSONObject jsonObj = (JSONObject) args[0];
                    if (jsonObj.get("newStatus").toString().equals("completed")) {
                        buildHtmlReportForSession(jsonObj.get("sessionId").toString());
                    }
                } catch (Exception ex) {
                    System.out.println(String.format(
                            "ERROR: Failed getting session details and building the execution report. %s: %s",
                            ex.getClass().getName(),
                            ex.getMessage()));
                }
            });
            socket.connect();
        } catch (Exception ex) {
            System.out.println(String.format(
                    "ERROR: Failed establishing WebSocket connection. %s: %s",
                    ex.getClass().getName(),
                    ex.getMessage()));
        }
    }

    /**
     * Marks the test status as failed, passed, etc., according to the test
     * status string reported in the test framework.
     */
    private static void setTestStatus(ExtentTest extentTest, String status) {
        switch (status) {
            case "cancelled":
                extentTest.skip("skip");
                break;
            case "failed":
                extentTest.fail("fail");
                break;
            case "passed":
                extentTest.pass("pass");
                break;
        }
    }

    /**
     * Converts a UNIX timestamp string into a Date object.
     */
    private static Date unixTimestampToDate(String timestamp) {
        return new java.util.Date(Long.parseLong(timestamp));
    }
}
