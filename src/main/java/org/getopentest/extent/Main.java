package org.getopentest.extent;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.google.gson.Gson;
import io.socket.client.IO;
import io.socket.client.Socket;
import io.socket.emitter.Emitter;
import java.io.InputStreamReader;
import java.net.URI;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONException;
import org.json.JSONObject;

public class Main {

    public static void main(String[] args) {
        if (args.length > 0) {
            buildHtmlReportForSession(args[args.length - 1].trim());
        } else {
            try {
                Socket socket = IO.socket("http://localhost:3000/session-status");
                socket.on("status-changed", new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        try {
                            JSONObject jsonObj = (JSONObject) args[0];
                            if (jsonObj.get("newStatus").toString().equals("completed")) {
                                buildHtmlReportForSession(jsonObj.get("sessionId").toString());
                            }
                        } catch (JSONException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
                socket.connect();
            } catch (Exception ex) {
            }
        }
    }

    /**
     * Builds the HTML report for the specified session.
     */
    private static void buildHtmlReportForSession(String sessionId) {
        try {
            System.out.println("Building report for " + sessionId);

            URI uri = new URI("http://localhost:3000/api/session/" + sessionId);
            Gson gson = new Gson();
            TestSession session = gson.fromJson(new InputStreamReader(uri.toURL().openStream()), TestSession.class);

            ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(session.id + ".html");
            ExtentReports extent = new ExtentReports();
            extent.attachReporter(htmlReporter);

            for (Test test : session.tests) {
                System.out.println("Test: " + test.name);
                ExtentTest extentTest = extent.createTest(test.name);
                extentTest.getModel().setStartTime(unixTimestampToDate(test.timeStarted));
                extentTest.getModel().setEndTime(unixTimestampToDate(test.timeCompleted));
                setTestStatus(extentTest, test.result);

                for (TestAction action : test.actions) {
                    System.out.println("Action: " + action.description);
                    ExtentTest testStep = extentTest.createNode(action.description);
                    setTestStatus(testStep, action.result);
                }
            }

            extent.flush();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Marks the test status as failed, passed, etc., according to the test
     * status string reported in the test framework.
     */
    private static void setTestStatus(ExtentTest extentTest, String status) {
        switch (status) {
            case "cancelled":
                extentTest.skip("skip");
                break;
            case "failed":
                extentTest.fail("fail");
                break;
            case "passed":
                extentTest.pass("pass");
                break;
        }
    }

    /**
     * Converts a UNIX timestamp string into a Date object.
     */
    private static Date unixTimestampToDate(String timestamp) {
        return new java.util.Date(Long.parseLong(timestamp));
    }
}
